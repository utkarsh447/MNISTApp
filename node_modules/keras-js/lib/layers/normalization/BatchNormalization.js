'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _Layer2 = require('../../Layer');

var _Layer3 = _interopRequireDefault(_Layer2);

var _Tensor = require('../../Tensor');

var _Tensor2 = _interopRequireDefault(_Tensor);

var _ndarrayOps = require('ndarray-ops');

var _ndarrayOps2 = _interopRequireDefault(_ndarrayOps);

var _ndarrayUnpack = require('ndarray-unpack');

var _ndarrayUnpack2 = _interopRequireDefault(_ndarrayUnpack);

var _flattenDeep = require('lodash/flattenDeep');

var _flattenDeep2 = _interopRequireDefault(_flattenDeep);

var _checkPipelineSupport = require('../../utils/checkPipelineSupport');

var _checkPipelineSupport2 = _interopRequireDefault(_checkPipelineSupport);

var _WebGLBatchNorm = require('../../ext/normalization/WebGLBatchNorm');

var _WebGLBatchNorm2 = _interopRequireDefault(_WebGLBatchNorm);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * BatchNormalization layer class
 */
var BatchNormalization = function (_Layer) {
  _inherits(BatchNormalization, _Layer);

  /**
   * Creates an BatchNormalization layer
   */
  function BatchNormalization() {
    var attrs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, BatchNormalization);

    var _this = _possibleConstructorReturn(this, (BatchNormalization.__proto__ || Object.getPrototypeOf(BatchNormalization)).call(this, attrs));

    _this.layerClass = 'BatchNormalization';

    var _attrs$epsilon = attrs.epsilon,
        epsilon = _attrs$epsilon === undefined ? 0.001 : _attrs$epsilon,
        _attrs$axis = attrs.axis,
        axis = _attrs$axis === undefined ? -1 : _attrs$axis,
        _attrs$center = attrs.center,
        center = _attrs$center === undefined ? true : _attrs$center,
        _attrs$scale = attrs.scale,
        scale = _attrs$scale === undefined ? true : _attrs$scale;


    _this.epsilon = epsilon;
    _this.center = center;
    _this.scale = scale;

    // no batch axis, so axis is less 1 compared to representation in keras
    // will be set in call(), as input tensor shape is needed to calculate axis
    // if axis < 0
    _this.axis = axis;
    _this.axisNormalized = false;

    // Layer weights specification
    _this.params = [];
    if (_this.scale) {
      _this.params.push('gamma');
    }
    if (_this.center) {
      _this.params.push('beta');
    }
    _this.params = _this.params.concat(['moving_mean', 'moving_variance']);

    // Enable layer gpu +/- pipeline mode if supported
    if (_this.gpu && weblas) {
      _this._useWeblas = true;
      if (_this.pipeline) {
        var isPipelineModeSupported = (0, _checkPipelineSupport2.default)(_this.layerClass, attrs);
        if (isPipelineModeSupported) {
          _this._pipelineEnabled = true;
          _this.webglBatchNorm = new _WebGLBatchNorm2.default();
        } else {
          _this._pipelineEnabled = false;
        }
      }
    }
    return _this;
  }

  /**
   * Method for setting layer weights. Extends `super` method.
   * @param {Tensor[]} weightsArr - array of weights which are instances of Tensor
   */


  _createClass(BatchNormalization, [{
    key: 'setWeights',
    value: function setWeights(weightsArr) {
      var _this2 = this;

      _get(BatchNormalization.prototype.__proto__ || Object.getPrototypeOf(BatchNormalization.prototype), 'setWeights', this).call(this, weightsArr);

      if (this._useWeblas) {
        this.params.forEach(function (param) {
          _this2.weights[param].createWeblasTensor();
        });
      }
    }

    /**
     * Runs layer computational logic in pipeline mode
     * Only works with a previous convolutional layer with its output containing
     * a weblas pipeline tensor which is a 2-D tiled representation (tile data, channels).
     * The output after normalization is still a 2-D tiled representation (typically as input
     * to convolution or merge layers running in pipeline mode).
     * @param {Tensor} x
     * @returns {Tensor} x
     */

  }, {
    key: '_callPipelineMode',
    value: function _callPipelineMode(x) {
      if (!x._fromPipeline) {
        return this._callRegularMode(x);
      }

      x.weblasTensor = this.webglBatchNorm.call(x.weblasTensor, this.epsilon, this.weights.gamma.weblasTensor, this.weights.beta.weblasTensor, this.weights.moving_mean.weblasTensor, this.weights.moving_variance.weblasTensor);

      return x;
    }

    /**
     * Runs layer computational logic in regular mode
     * @param {Tensor} x
     * @returns {Tensor} x
     */

  }, {
    key: '_callRegularMode',
    value: function _callRegularMode(x) {
      if (!this.axisNormalized) {
        this.axis = this.axis < 0 ? x.tensor.shape.length + this.axis : this.axis - 1;
        this.axisNormalized = true;
      }

      var broadcast = [];
      for (var d = 0; d < x.tensor.shape.length; d++) {
        if (d === this.axis) broadcast.push(1);else broadcast.push(null);
      }

      // broadcast weights
      var _gamma = new _Tensor2.default([], x.tensor.shape);
      var _beta = new _Tensor2.default([], x.tensor.shape);
      for (var i = 0; i < x.tensor.shape[this.axis]; i++) {
        broadcast[this.axis] = i;
        if (this.scale) {
          var _gamma$tensor;

          _ndarrayOps2.default.assigns((_gamma$tensor = _gamma.tensor).pick.apply(_gamma$tensor, broadcast), this.weights.gamma.tensor.get(i));
        }
        if (this.center) {
          var _beta$tensor;

          _ndarrayOps2.default.assigns((_beta$tensor = _beta.tensor).pick.apply(_beta$tensor, broadcast), this.weights.beta.tensor.get(i));
        }
      }

      var _mean = new _Tensor2.default([], x.tensor.shape);
      var _std = new _Tensor2.default([], x.tensor.shape);

      // feature-wise normalization
      for (var _i = 0; _i < x.tensor.shape[this.axis]; _i++) {
        var _mean$tensor, _std$tensor;

        broadcast[this.axis] = _i;
        _ndarrayOps2.default.assigns((_mean$tensor = _mean.tensor).pick.apply(_mean$tensor, broadcast), this.weights.moving_mean.tensor.get(_i));
        _ndarrayOps2.default.assigns((_std$tensor = _std.tensor).pick.apply(_std$tensor, broadcast), this.weights.moving_variance.tensor.get(_i) + this.epsilon);
      }
      _ndarrayOps2.default.sqrteq(_std.tensor);

      _ndarrayOps2.default.subeq(x.tensor, _mean.tensor);
      _ndarrayOps2.default.diveq(x.tensor, _std.tensor);
      if (this.scale) {
        _ndarrayOps2.default.muleq(x.tensor, _gamma.tensor);
      }
      if (this.center) {
        _ndarrayOps2.default.addeq(x.tensor, _beta.tensor);
      }

      return x;
    }

    /**
     * Method for layer computational logic
     * @param {Tensor} x
     * @returns {Tensor} x
     */

  }, {
    key: 'call',
    value: function call(x) {
      if (this._pipelineEnabled) {
        return this._callPipelineMode(x);
      } else {
        return this._callRegularMode(x);
      }
    }
  }]);

  return BatchNormalization;
}(_Layer3.default);

exports.default = BatchNormalization;