'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _Merge3 = require('./_Merge');

var _Merge4 = _interopRequireDefault(_Merge3);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Dot merge layer class, extends abstract _Merge class
 */
var Dot = function (_Merge2) {
  _inherits(Dot, _Merge2);

  /**
   * Creates a Dot merge layer
   */
  function Dot() {
    var attrs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, Dot);

    var _this = _possibleConstructorReturn(this, (Dot.__proto__ || Object.getPrototypeOf(Dot)).call(this, attrs));

    _this.layerClass = 'Dot';

    _this.mode = 'dot';

    var _attrs$axes = attrs.axes,
        axes = _attrs$axes === undefined ? -1 : _attrs$axes,
        _attrs$normalize = attrs.normalize,
        normalize = _attrs$normalize === undefined ? false : _attrs$normalize;

    // no mini-batch axis here, so we subtract 1 if given axis > 0

    if (Array.isArray(axes)) {
      _this.dotAxes = [axes[0] <= 0 ? axes[0] : axes[0] - 1, axes[1] <= 0 ? axes[1] : axes[1] - 1];
    } else {
      _this.dotAxes = [axes <= 0 ? axes : axes - 1, axes <= 0 ? axes : axes - 1];
    }

    _this.normalize = normalize;
    return _this;
  }

  return Dot;
}(_Merge4.default);

exports.default = Dot;